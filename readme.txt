Примечания по реализации.

1. Структура каталога

build/          - последний билд
src/            - исходный код, разработка
test/           - тестовое окружение
buildjs.js      - конфигурация сборки js-кода
gulpfile.js     - настройки и задачи таск-менеджера
package.json    - настройки пакета (node/gulp)


2. Архитектурные решения

Экземпляр приложения представлен в одном представлении,
которое имеет дочерние (вложенные) представления в соответствии с вкладками:
для коллекции автомобилей и коллекции выбранных автомобилей, для статистики.

Фильтр по брэндам общий для двух коллекций:
мне показалось, так удобнее с точки зрения пользователя.

В виду небольшого размера коллекций и всего одного клиентского действия
над их моделями, было принято решение для удобства не делегировать его от коллекций,
а прописать на каждой модели (button.click).

Выбранные автомобили добавляются в начало списка выбранных.


3. База данных автомобилей и брэндов

Для простоты были созданы два статических файла: для брэндов и списка автомобилей.
При чтении списка автомобилей (инициализация), помечаются те, которые отмечены на клиенте как выбранные:
исходя из этого формируются две коллекции (на клиенте хранится список идентификаторов выбранных авто).


4. Всплывающая подсказка по изображениям

Здесь уже используется делегирование события над представлением таблицы автомобилей.
Так как нужен только путь к полному изображению, достаточно сохранить его в атрибуте превью изображения:
тем самым нет надобности искать модель в коллекции.

Для таблицы используется один DOM-элемент, представляющий собой всплывающую подсказку с изображением.
При наведении на превью: изменяется src изображения подсказки (изображение загружается
если еще не было закэшировано браузером), DOM-элемент двигается куда нужно и открывается.

Если при инициализации списка автомобилей, какие то модели не имеют ссылки на превью,
то в качестве него будет использоваться полное изображение (урезанное под превью).


5. Сборка проекта

Для сборки используется Gulp (см. модули в package.json).
Для компиляции стилей (SCCS) использовался Scout.
Сборка: минификация стилей, сжатие изображений, конкатенация и минификация js-кода (через утилиту r.js).

Конмада: gulp build [--tag <tag>] [--info]


6. Тестовое окружение

Для тестов используется mocha/chai на клиенте.
Над тестами не заморачивался, они несут больше описательный характер =)

